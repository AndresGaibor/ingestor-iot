services:
  mqtt-broker:
    image: eclipse-mosquitto:2.0
    container_name: mqtt-broker
    restart: unless-stopped
    ports:
      - "1883:1883"    # puerto MQTT “sin TLS”
      - "9001:9001"    # websocket opcional
    volumes:
      - ./data/mosquitto/data:/mosquitto/data
    networks:
      - backend
  ingestor-iot:
    container_name: ingestor-iot
    build:
      context: .
      dockerfile: .devcontainer/Dockerfile
    image: ingestor-iot:latest
    env_file:
      - .env
    # Montamos el certificado desde fuera
    volumes:
      - ./certs:/certs:ro
    ports:
      - "5000:5000"
    networks:
      - backend
    depends_on:
      mqtt-broker: {}
      db:
        condition: service_healthy
  # Tu servicio de Grafana, con variables para conectarse a la BD
  grafana:
    image: grafana/grafana-enterprise
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - ./data/grafana:/var/lib/grafana
    networks:
      - backend
    depends_on:
      db:
        condition: service_healthy

  # Tu servicio de Base de Datos
  db:
    image: timescale/timescaledb-ha:pg17
    container_name: timescaledb
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL","pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=iotuser
      - POSTGRES_PASSWORD=iotpass
      - POSTGRES_DB=iotdb
    volumes:
      - ./data/timescale:/var/lib/postgresql/data
    networks:
      - backend

# Definición de la red que usan los contenedores para comunicarse
networks:
  backend:
    driver: bridge